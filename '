from cards import *
import numpy as np


class Player():
    """ Representation of a player
    Attributes:
        - name: Name of the player
        - chips: (list) with 
    """
    def __init__(self, name='', score=0):
        self.name = name
        self.chips = ["Blue", "White", "Green", "Red", "Black"]
        self.hand = Hand(self.name)
        self.score = score

    # what member functions do I want?
    def discard(self, game, card_id=-1):
        """
        Pops card at given index, appends to Game's discard pile
        """
        game.discard_pile.append(self.hand.pop_card(card_id))

    def __str__(self):
        """ Prints the name of the player when calling print on a Player object """
        return self.name
       
class Game():
    """ This Game class
    Inputs:
        - players: list of player objects
    Attributes:
        - players: list of player objects
        - void_cards: (list) - not sure if this is needed
        - discard_pile: (list) 
        - add_disc_pile: (list) - not sure if this is needed
        - board: (list) community cards
        - deck: (Deck object defined in cards.py)
    """
    all_chips = ["Blue", "White", "Green", "Red", "Black"]
    def __init__(self, players=[]):
        self.players = players
        self.void_cards = [] # for past discards and "blacked" cards
        self.discard_pile = []
        self.add_disc_pile  = [] 
        self.board = []
        self.deck = Deck()

    def discard_round(self):
        # players enter the discard round
        for player in self.players:
            print(player.name, "discard")
            print(player.hand)
            while True: # loop for user validation
                card_id = input("Enter the card to discard: ")
                try:
                    int(card_id) - 1
                except ValueError:
                    print("Enter the integer associated with the card you would like to discard.")
                    continue
                # bounds checking
                card_id = int(card_id) - 1 
                if card_id < 0 or card_id > (len(player.hand.cards) - 1):
                    print("Invalid discard id.")
                else:
                    player.discard(game, card_id=card_id)
                    break

    def additional_discard(self, disc_players):
        # almost the same as discard_round for now, just with fewer players and
        # additional discards go into different game "pile"
        for player in self.players:
            print(player.name, "discard")
            print(player.hand)
            while True: # loop for user validation
                card_id = input("Enter the card to discard: ")
                if card_id == '':
                    continue
                # bounds checking
                card_id = int(card_id) - 1 
                if card_id < 0 or card_id > (len(player.hand.cards) - 1):
                    print("Invalid discard id")
                else:
                    self.add_disc_pile.append(player.discard(card_id))
                    break
      
    def get_same_rank_idx(self):
        # I think card should ranks
        # This could have bugs for mutliples pairs of players
        # Needs more testing
        bad_idx = -1
        ranks = [card.rank for card in self.discard_pile]
        for i, rank1 in enumerate(ranks):
            same_rank_idx = []
            if rank1 in ranks[i+1:]:
                same_rank_idx.append(i)
                #print("same card idx1", same_card_idx)            
                for j, rank2 in enumerate(ranks[i+1:]):
                    if rank1 == rank2:
                       same_rank_idx.append(i+j+1)
        
            if len(same_rank_idx) > 0:
                for idx in same_rank_idx:
                    ranks[idx] = bad_idx
                    bad_idx  -= 1 

        print("same card idx", same_rank_idx)            
        return same_rank_idx

    def additional_discard(self, player_idx):
        add_disc_pile = []
        
        for i in player_idx:
            player = self.players[i]
            print(player, "addidtional discard")
            print(player.hand)
            while True: # loop for user validation
                card_id = input("Enter the card to discard: ")
                try:
                    int(card_id) - 1
                except ValueError:
                    print("Enter the integer associated with the card you would like to discard.")
                    continue
                # bounds checking
                card_id = int(card_id) - 1 
                if card_id < 0 or card_id > (len(player.hand.cards) - 1):
                    print("Invalid discard id.")
                else:
                    add_disc_pile.append(player.hand.cards.pop(card_id))
                    break
        
        # Did they really discard the same card again?
        for card in add_disc_pile:
            if card in add_disc_pile[i+1:]:
                print("Now you've gone and done it.")

        ranks = [card.rank for card in add_disc_pile]
        return np.argsort(ranks)

    def turn_order(self):
        """ Determines turn order for the chip playing round. Lowest discard goes first. 
            Returns:
                - turn_order (list): List of players sorted in order for the coming turn
        """
        ranks = [card.rank for card in self.discard_pile]
        sorted_ranks_idx = np.argsort(ranks)
        first_order = [self.players[i] for i in sorted_ranks_idx]
     
        # check if multiple cards of the same rank have been discarded
        if len(ranks) == len(set(ranks)):
            turn_order = first_order
        else:
            print("Additional discard required")
            add_player_idx = self.get_same_rank_idx() 
            add_disc_players_id = self.additional_discard(add_player_idx) 
            add_players = [self.players[add_player_idx[i]] for i in add_disc_players_id] 

            turn_order = []
            for i in range(len(self.players)):
                if i in add_player_idx:
                    turn_order.append(add_players.pop(0))
                else:
                    turn_order.append(first_order[i])

        return turn_order
   
    def reveal_card(self, player):
        """ The player has used the green chip to choose an opponent's card to reveal. """
        pass
    
    def flip_game(self, player):
        """ The player choosen to use their blue chip to flip the game (worst hand wins). """
        # Need to wait until I have a final hand evaluator
        pass

    def blue_add_card(self):
        """ A blue chip has been used to add a card to the board """
        drawn_card = game.deck.draw(n_draws=1)
        self.move_cards_to_board(drawn_card)

    def play_blue(self, player):
        # check player score to see if they can "flip" game
        if player.score == 3 or player.score == 5:
            while True:
                choice = input("Enter 1 to reveal a card. Enter 2 to flip the game.")
                if choice == 1:
                    game.blue_add_card()
                    break
                if choice == 2:
                    game.flip_game()
                    break
        # If player score is not 3 or 5, the blue chip adds a card to the board
        game.blue_add_card()
        player.chips.remove("Blue")
    
    def print_board(self):
        """ Prints the game board with id numbers for each card """
        print("Board:")
        for i, card in enumerate(self.board):
            print(str(i+1) + ": " + card.__str__())


    def play_white(self):
        """ A player has choosen to play the white chip to replace a card on the board with a new draw from the deck. """
        valid_ids = [i for i in range(len(self.board))] 
        while True:
            replace_card_id = input("Enter the number of the card you want to replace: ")
            try:
                replace_card_id = int(replace_card_id) - 1
            except ValueError:
                print("Enter the NUMBER associated with the card on the left of the colon.")
                continue

            if replace_card_id in valid_ids:
                new_card = self.deck.draw()
                self.board[replace_card_id] = new_card
                break
            else:
                print("Invalid card id")

    def play_black(self):
        valid_ids = [i for i in range(len(self.board))] 
        while True:
            remove_card_id = input("Enter the number of the card you want to remove: ")
            try:
                remove_card_id = int(remove_card_id) - 1
            except ValueError:
                print("Enter the NUMBER associated with the card on the left of the colon.")
                continue

           if replace_card_id not in valid_ids:
                print("Invalid card id")
                continue
 
            # Can't play the black chip and the red chip on the same card
            if self.board[remove_card_id].red_chipped is True:
                print("Can't play the black chip and the red chip on the same card")
            else:
                break

        self.board.pop(remove_card_id)

    def chip_playing_round(self, turn_order):
        """ Loop through players. Each player plays a chip. """
        for player in turn_order:
            self.print_board()
            player_name = player.__str__()
            print(player_name + "'s chips:")
            print(player.chips)
            
            while True:
                print("Enter the color of the chip you would like to play.")
                color = input()
                if color in player.chips:
                    print(player_name  + " will play the " + color + " chip.")
                    if color == "Blue":
                        game.play_blue(player)
                    if color == "White":
                        game.play_white()
                    if color == "Black":
                        game.play_black()
                    break

    def flop(self):
        """ Draws three cards from the deck and adds them to the board. """
        n_draws = 3
        drawn_cards = self.deck.draw(n_draws)
        self.move_cards_to_board(drawn_cards)
    
    def move_cards_to_board(self, cards):
        """ Takes a Card object or list of Card objects as an argument and adds them to the game board. 
        Arugment:
            cards - Card object or list of Card objects
        """
        if type(cards) is list:
            for card in cards:
                self.board.append(card)
        else:
            self.board.append(cards)

if __name__ == '__main__':
    max_hand_size = 4

    # start the game
    game = Game()
    # get a the deck
    deck = game.deck
    deck.shuffle()
    # set the players
    player1 = Player("Eugene")
    player2 = Player("Willis")
    player3 = Player("Carol")
    game.players = [player1, player2, player3]

    # Make sure player1 and player2 have a card in common
    for i in range(4):
        player1.hand.cards.append(Card(i+1,i))
        player2.hand.cards.append(Card(i+4,3-i))
                      
    #deck.move_cards(player1.hand, max_hand_size)
    #deck.move_cards(player2.hand, max_hand_size)
    deck.move_cards(player3.hand, max_hand_size)
   
    """
    # discard round
    print("discard round")
    game.discard_round()
    print("discard pile")
    for card in game.discard_pile:
        print(card)
    print()

    # I think it's working to here

    # determine highest discard for turn order
    # add discarded thing to players class, add function for card rank
    # evalutaion, determine order 

    #print("\ntesting zone")
    to=game.turn_order1() 
    for t in to:
        print(t)
    """

    """
    # Move the game along
    game.discard_round()
    to=game.turn_order() 
    game.chip_playing_round(to)
    """
    

    # Test White
    game.discard_round()
    to=game.turn_order() 
    game.flop()
    game.chip_playing_round(to)

